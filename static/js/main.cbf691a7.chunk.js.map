{"version":3,"sources":["components/TodolistUI.js","containers/Todolist.js","containers/TodolistRedux.js","redux/action-creator.js","redux/action-types.js","redux/reducer.js","redux/store.js","index.js"],"names":["TodoListUI","props","inputValue","list","changeInputValue","addTodoItem","deleteTodoItem","type","id","name","value","onChange","onClick","map","item","index","key","TodoList","this","getTodoItem","TodolistUI","Component","connect","state","dispatch","e","action","target","axios","get","then","res","data","initItem","console","log","Todolist","initState","reducer","newState","JSON","parse","stringify","splice","store","createStore","applyMiddleware","thunk","App","TodolistRedux","ReactDOM","render","document","getElementById"],"mappings":"4QA0CeA,MA/Bf,SAAoBC,GAAQ,IAExBC,EAKED,EALFC,WACAC,EAIEF,EAJFE,KACAC,EAGEH,EAHFG,iBACAC,EAEEJ,EAFFI,YACAC,EACEL,EADFK,eAEF,OACE,6BACE,6BACE,2BACEC,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,MAAOR,EACPS,SAAUP,IAEZ,4BAAQQ,QAASP,GAAjB,QAEF,4BACGF,EAAKU,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIC,IAAKD,EAAOH,QAAS,kBAAMN,EAAeS,KAC3CD,SCpBEG,E,kLARXC,KAAKjB,MAAMkB,gB,+BAIX,OAAO,kBAACC,EAAeF,KAAKjB,W,GANToB,aCmCRC,eA7BS,SAACC,GACvB,MAAO,CACLrB,WAAYqB,EAAMrB,WAClBC,KAAMoB,EAAMpB,SAKW,SAACqB,GAC1B,MAAO,CACLpB,iBADK,SACYqB,GACf,IAAMC,EClBgC,CAC1CnB,KCF0B,eDG1BG,MDgBoCe,EAAEE,OAAOjB,OACzCc,EAASE,IAEXrB,YALK,WAOHmB,ECb4B,CAChCjB,KCdsB,cF4BpBD,eATK,SASUS,GACb,IAAMW,ECrBkB,SAACX,GAAD,MAAY,CACxCR,KCRyB,cDSzBQ,SDmBmBT,CAAeS,GAC9BS,EAASE,IAEXP,YAbK,WAcH,IAAMO,ECVH,SAACF,GACN,OAAOI,IACJC,IAAI,mEACJC,MAAK,SAACC,GACL,IACML,EAXU,SAACM,GAAD,MAAW,CACjCzB,KCfuB,YDgBvByB,QASqBC,CADFF,EAAIC,MAEjBE,QAAQC,IAAIT,GACZF,EAASE,ODIXF,EAASE,OAKAJ,CAA6Cc,G,sBGrCtDC,EAAY,CAChBnC,WAAY,GACZC,KAAM,IA4BOmC,EAzBQ,WAAgC,IAA/Bf,EAA8B,uDAAtBc,EAAWX,EAAW,uCACpD,GDN0B,iBCMtBA,EAAOnB,KAAuB,CAChC,IAAMgC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnB,IAE3C,OADAgB,EAASrC,WAAawB,EAAOhB,MACtB6B,EAET,GDbsB,aCalBb,EAAOnB,KAAmB,CAC5B,IAAMgC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnB,IAG3C,OAFAgB,EAASpC,KAAT,sBAAoBoB,EAAMpB,MAA1B,CAAgCoB,EAAMrB,aACtCqC,EAASrC,WAAa,GACfqC,EAET,GDlByB,gBCkBrBb,EAAOnB,KAAsB,CAC/B,IAAMgC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnB,IAE3C,OADAgB,EAASpC,KAAKwC,OAAOjB,EAAOX,MAAO,GAC5BwB,EAET,GDrBuB,cCqBnBb,EAAOnB,KAAoB,CAC7B,IAAMgC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnB,IAE3C,OADAgB,EAASpC,KAAT,YAAoBuB,EAAOM,MACpBO,EAET,OAAOhB,GCtBMqB,EAFDC,YAAYP,EAASQ,YAAgBC,MCE7CC,EACJ,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAACK,EAAD,OAIJC,IAASC,OAAOH,EAAKI,SAASC,eAAe,W","file":"static/js/main.cbf691a7.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nTodoListUI.propTypes = {\n  inputValue: PropTypes.string.isRequired,\n  list: PropTypes.array.isRequired,\n  changeInputValue: PropTypes.func.isRequired,\n  addTodoItem: PropTypes.func.isRequired,\n  deleteTodoItem: PropTypes.func.isRequired,\n};\n\nfunction TodoListUI(props) {\n  const {\n    inputValue,\n    list,\n    changeInputValue,\n    addTodoItem,\n    deleteTodoItem,\n  } = props;\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          id=\"todolist\"\n          name=\"todolist\"\n          value={inputValue}\n          onChange={changeInputValue}\n        />\n        <button onClick={addTodoItem}>Add</button>\n      </div>\n      <ul>\n        {list.map((item, index) => (\n          <li key={index} onClick={() => deleteTodoItem(index)}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodoListUI;\n","import React, { Component } from \"react\";\n\nimport TodolistUI from \"../components/TodolistUI\";\n\nclass TodoList extends Component {\n  componentDidMount() {\n    this.props.getTodoItem();\n  }\n\n  render() {\n    return <TodolistUI {...this.props} />;\n  }\n}\n\nexport default TodoList;\n","import { connect } from \"react-redux\";\nimport {\n  changeInputValue,\n  deleteTodoItem,\n  addTodoItem,\n  getTodoItem,\n} from \"../redux/action-creator\";\n\nimport Todolist from \"../containers/Todolist\";\n\nconst mapStateToProps = (state) => {\n  return {\n    inputValue: state.inputValue,\n    list: state.list,\n  };\n};\n\n// version one, more understandable with using redux.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeInputValue(e) {\n      const action = changeInputValue(e.target.value);\n      dispatch(action);\n    },\n    addTodoItem() {\n      const action = addTodoItem();\n      dispatch(action);\n    },\n    deleteTodoItem(index) {\n      const action = deleteTodoItem(index);\n      dispatch(action);\n    },\n    getTodoItem() {\n      const action = getTodoItem();\n      dispatch(action);\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todolist);\n","import { ADD_TODO, DELETE_TODO, CHANGE_INPUT, INIT_ITEM } from \"./action-types\";\nimport axios from \"axios\";\n\nexport const changeInputValue = (value) => ({\n  type: CHANGE_INPUT,\n  value,\n});\n\nexport const deleteTodoItem = (index) => ({\n  type: DELETE_TODO,\n  index,\n});\n\nexport const addTodoItem = () => ({\n  type: ADD_TODO,\n});\n\nexport const initItem = (data) => ({\n  type: INIT_ITEM,\n  data,\n});\n\nexport const getTodoItem = () => {\n  return (dispatch) => {\n    return axios\n      .get(\"https://fa1bfe87-ee72-4e52-bb88-17e450b46a2c.mock.pstmn.io/list\")\n      .then((res) => {\n        const data = res.data;\n        const action = initItem(data);\n        console.log(action);\n        dispatch(action);\n      });\n  };\n};\n","export const ADD_TODO = \"add_todo\";\nexport const DELETE_TODO = \"delete_todo\";\nexport const CHANGE_INPUT = \"change_input\";\nexport const INIT_ITEM = \"init_item\";\n","import { ADD_TODO, DELETE_TODO, CHANGE_INPUT, INIT_ITEM } from \"./action-types\";\n\nconst initState = {\n  inputValue: \"\",\n  list: [],\n};\n\nexport const reducer = (state = initState, action) => {\n  if (action.type === CHANGE_INPUT) {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.inputValue = action.value;\n    return newState;\n  }\n  if (action.type === ADD_TODO) {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list = [...state.list, state.inputValue];\n    newState.inputValue = \"\";\n    return newState;\n  }\n  if (action.type === DELETE_TODO) {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list.splice(action.index, 1);\n    return newState;\n  }\n  if (action.type === INIT_ITEM) {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list = [...action.data];\n    return newState;\n  }\n  return state;\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport TodolistRedux from \"./containers/TodolistRedux\";\nimport store from \"./redux/store\";\n\nconst App = (\n  <Provider store={store}>\n    <TodolistRedux />\n  </Provider>\n);\n\nReactDOM.render(App, document.getElementById(\"root\"));\n"],"sourceRoot":""}